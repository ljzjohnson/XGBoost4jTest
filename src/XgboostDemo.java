/*   
 * Copyright (c) 2010-2020 Founder LZG. All Rights Reserved.   
 *   
 * This software is the confidential and proprietary information of   
 * Founder. You shall not disclose such Confidential Information   
 * and shall use it only in accordance with the terms of the agreements   
 * you entered into with Founder.   
 *   
 */

/**
 * description
 * @author luzhongguo
 * @version 1.0, 2016年4月28日
 */

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.dmlc.xgboost4j.Booster;
import org.dmlc.xgboost4j.DMatrix;
import org.dmlc.xgboost4j.demo.util.CustomEval;
import org.dmlc.xgboost4j.demo.util.Params;
import org.dmlc.xgboost4j.util.Trainer;
import org.dmlc.xgboost4j.util.XGBoostError;

public class XgboostDemo {
	public static void main(String[] args) throws XGBoostError {
		// load file from text file, also binary buffer generated by xgboost4j
		DMatrix trainMat = new DMatrix("././xgboost/data/agaricus.txt.train");
		DMatrix testMat = new DMatrix("././xgboost/data/agaricus.txt.test");
		// specify parameters
		Params param = new Params() {
			{
				put("eta", 0.001);
				put("max_depth", 3);
				put("eval_metric", "auc");
				put("silent", 1);
				put("objective", "binary:logistic");
			}
		};
		// specify watchList
		List<Map.Entry<String, DMatrix>> watchs = new ArrayList<>();
		watchs.add(new AbstractMap.SimpleEntry<>("train", trainMat));
		watchs.add(new AbstractMap.SimpleEntry<>("test", testMat));

		// train a booster
		int round = 1002;
		Booster booster = Trainer.train(param, trainMat, round, watchs, null,
				null);

		// predict use 1 tree
		float[][] predicts1 = booster.predict(testMat, false, 1);
		// by default all trees are used to do predict
		float[][] predicts2 = booster.predict(testMat);

		// use a simple evaluation class to check error result
		CustomEval eval = new CustomEval();
		System.out.println("error of predicts1: "
				+ eval.eval(predicts1, testMat));
		System.out.println("error of predicts2: "
				+ eval.eval(predicts2, testMat));
	}
}